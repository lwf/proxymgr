#!/usr/bin/env ruby
$LOAD_PATH.unshift File.expand_path(File.join(__FILE__, '..', '..', 'lib'))

require 'proxymgr'
require 'yaml'
require 'docopt'

opt = <<OPT
ProxyMgr manages Haproxy dynamically.

Usage:
  #{__FILE__} -c=<path> | --config=<path> [-d|--debug]

Options:
  -c=<path> --config=<path>   Set configuration file path
  -d --debug                  Turn on debug logging
OPT

begin
  require 'pp'
  opts = Docopt.docopt(opt)
rescue Docopt::Exit => e
  $stderr.puts e.message
  exit 1
end

ProxyMgr::Logging.level = opts['--debug'] ? Logger::DEBUG : Logger::INFO

begin
  config = ProxyMgr::Config.new(opts['--config'])
rescue ProxyMgr::Config::ConfigException => e
  $stderr.puts "config file #{opts['--config']} failed to validate: #{e.message}"
  exit 1
end

haproxy_config  = config['haproxy']
haproxy         = ProxyMgr::Haproxy.new(haproxy_config['path'],
                                        haproxy_config['config_path'],
                                        :socket   => haproxy_config['socket_path'],
                                        :global   => haproxy_config['global'],
                                        :defaults => haproxy_config['defaults'])
if haproxy.version < 1.5
  $stderr.puts "ProxyMgr requires haproxy version 1.5 or later."
  exit 1
end

service_manager   = nil
begin
  sink            = ProxyMgr::Sink.new(haproxy)
  service_manager = ProxyMgr::ServiceManager.new(sink)
  service_config  = ProxyMgr::ServiceConfig.create(service_manager,
                                                   config['service_config'])

  [:INT, :TERM].each do |sig|
    Signal.trap(sig) do 
      Thread.new { service_manager.shutdown }.join
      exit 0
    end
  end

  sleep
rescue SystemExit
rescue NameError, Exception => e
  service_manager.shutdown if service_manager
  raise e
end
